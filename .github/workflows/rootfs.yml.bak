name: Build ARM64 RootFS (USTC + XZ Max Compression)
on:
  push:
    branches: [main]
    paths:
      - '.github/workflows/rootfs.yml'
      - 'Dockerfile.*'
  workflow_dispatch:
env:
  OUTPUT_DIR: ./rootfs-output
  UBUNTU_VER: 22.04
  DEBIAN_VER: 12
  ALPINE_VER: 3.19
  ARCHARM_ARCH: aarch64
  RELEASE_VER: ${{ github.sha_short }}-$(date +%Y%m%d)
jobs:
  setup-env:
    runs-on: ubuntu-latest
    outputs:
      release_version: ${{ env.RELEASE_VER }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Create output dir
        run: mkdir -p ${{ env.OUTPUT_DIR }}
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx-

  build-ubuntu:
    runs-on: ubuntu-latest
    needs: setup-env
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build & compress RootFS
        run: |
          docker build --platform linux/arm64 -t ubuntu-rootfs -f Dockerfile.ubuntu .
          CONTAINER_ID=$(docker run -d --platform linux/arm64 ubuntu-rootfs sleep infinity)
          docker export $CONTAINER_ID | xz -9e --threads=0 > ${{ env.OUTPUT_DIR }}/ubuntu-${{ env.UBUNTU_VER }}-arm64-rootfs.tar.xz
          docker stop $CONTAINER_ID && docker rm $CONTAINER_ID
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu-rootfs
          path: ${{ env.OUTPUT_DIR }}/ubuntu-${{ env.UBUNTU_VER }}-arm64-rootfs.tar.xz
          retention-days: 1

  build-debian:
    runs-on: ubuntu-latest
    needs: setup-env
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build & compress RootFS
        run: |
          docker build --platform linux/arm64 -t debian-rootfs -f Dockerfile.debian .
          CONTAINER_ID=$(docker run -d --platform linux/arm64 debian-rootfs sleep infinity)
          docker export $CONTAINER_ID | xz -9e --threads=0 > ${{ env.OUTPUT_DIR }}/debian-${{ env.DEBIAN_VER }}-arm64-rootfs.tar.xz
          docker stop $CONTAINER_ID && docker rm $CONTAINER_ID
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: debian-rootfs
          path: ${{ env.OUTPUT_DIR }}/debian-${{ env.DEBIAN_VER }}-arm64-rootfs.tar.xz
          retention-days: 1

  build-alpine:
    runs-on: ubuntu-latest
    needs: setup-env
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build & compress RootFS
        run: |
          docker build --platform linux/arm64 -t alpine-rootfs -f Dockerfile.alpine .
          CONTAINER_ID=$(docker run -d --platform linux/arm64 alpine-rootfs sleep infinity)
          docker export $CONTAINER_ID | xz -9e --threads=0 > ${{ env.OUTPUT_DIR }}/alpine-${{ env.ALPINE_VER }}-arm64-rootfs.tar.xz
          docker stop $CONTAINER_ID && docker rm $CONTAINER_ID
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: alpine-rootfs
          path: ${{ env.OUTPUT_DIR }}/alpine-${{ env.ALPINE_VER }}-arm64-rootfs.tar.xz
          retention-days: 1

  build-archarm:
    runs-on: ubuntu-latest
    needs: setup-env
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build & compress RootFS
        run: |
          docker build --platform linux/arm64 -t archarm-rootfs -f Dockerfile.archarm .
          CONTAINER_ID=$(docker run -d --platform linux/arm64 archarm-rootfs sleep infinity)
          docker export $CONTAINER_ID | xz -9e --threads=0 > ${{ env.OUTPUT_DIR }}/archlinuxarm-${{ env.ARCHARM_ARCH }}-rootfs.tar.xz
          docker stop $CONTAINER_ID && docker rm $CONTAINER_ID
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: archarm-rootfs
          path: ${{ env.OUTPUT_DIR }}/archlinuxarm-${{ env.ARCHARM_ARCH }}-rootfs.tar.xz
          retention-days: 1

  create-release:
    runs-on: ubuntu-latest
    needs: [setup-env, build-ubuntu, build-debian, build-alpine, build-archarm]
    steps:
      - name: Create output dir
        run: mkdir -p ${{ env.OUTPUT_DIR }}
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ${{ env.OUTPUT_DIR }}
          pattern: *-rootfs
          merge-multiple: true
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.setup-env.outputs.release_version }}
          name: ARM64 RootFS (USTC + XZ) v${{ needs.setup-env.outputs.release_version }}
          body: |
            ðŸ”¹ Features:
            1. RootFS repo: USTC mirror (faster package install)
            2. Base image: Docker Hub official (pure)
            3. Compression: XZ max (-9e), 30%-50% smaller than GZ
            4. Arch: ARM64 (aarch64)
            
            ðŸ“¦ Artifacts:
            - Ubuntu ${{ env.UBUNTU_VER }}: ubuntu-${{ env.UBUNTU_VER }}-arm64-rootfs.tar.xz
            - Debian ${{ env.DEBIAN_VER }}: debian-${{ env.DEBIAN_VER }}-arm64-rootfs.tar.xz
            - Alpine ${{ env.ALPINE_VER }}: alpine-${{ env.ALPINE_VER }}-arm64-rootfs.tar.xz
            - ArchARM: archlinuxarm-${{ env.ARCHARM_ARCH }}-rootfs.tar.xz
          files: ${{ env.OUTPUT_DIR }}/*.tar.xz
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
