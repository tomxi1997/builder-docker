name: 构建全量Linux发行版arm64 RootFS

on:
  push:
    branches: [ main ]
    paths: [ '.github/workflows/build-all-arm64-rootfs.yml' ]
  workflow_dispatch:
    inputs:
      debug_mode:
        description: "启用调试模式（保留临时文件）"
        type: boolean
        default: false

jobs:
  build-arm64-rootfs:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false  # 单个发行版失败不阻断整体
      matrix:
        # 发行版配置：name(名称)、type(类型)、release(版本)、mirror(arm64源)、gpg_key(可选)
        include:
          # Debian系
          - name: debian
            type: debian-like
            release: bookworm
            mirror: "http://mirrors.ustc.edu.cn/debian-ports/"
            gpg_key: "https://mirrors.ustc.edu.cn/debian-ports/archive-key.gpg"
          - name: ubuntu
            type: debian-like
            release: jammy
            mirror: "http://mirrors.ustc.edu.cn/ubuntu-ports/"
          - name: deepin
            type: debian-like
            release: apricot
            mirror: "http://mirrors.ustc.edu.cn/deepin-ports/"
          - name: openkylin
            type: debian-like
            release: 1.0
            mirror: "http://mirrors.ustc.edu.cn/openkylin/ports/"
          - name: kali
            type: debian-like
            release: kali-rolling
            mirror: "http://mirrors.ustc.edu.cn/kali-ports/"
          - name: parrot
            type: debian-like
            release: rolling
            mirror: "http://mirrors.ustc.edu.cn/parrot-ports/"
          - name: backbox
            type: debian-like
            release: 7
            mirror: "http://mirrors.ustc.edu.cn/backbox-ports/"
          # Arch系
          - name: arch
            type: arch-like
            release: aarch64
            mirror: "https://mirrors.tuna.tsinghua.edu.cn/archlinuxarm/$repo/$arch"
          - name: manjaro
            type: arch-like
            release: aarch64-unstable
            mirror: "https://mirrors.tuna.tsinghua.edu.cn/manjaro-arm/$repo/$arch"
          - name: artix
            type: arch-like
            release: aarch64
            mirror: "https://mirrors.tuna.tsinghua.edu.cn/artix-linux/$repo/$arch"
          # RHEL/Fedora系
          - name: fedora
            type: rhel-like
            release: 40
            mirror: "http://mirrors.ustc.edu.cn/fedora-secondary/releases/$release/Everything/aarch64/os/"
            gpg_key: "https://getfedora.org/static/fedora.gpg"
          - name: centos_stream
            type: rhel-like
            release: 9
            mirror: "http://mirrors.ustc.edu.cn/centos-stream/$release-stream/BaseOS/aarch64/os/"
            gpg_key: "https://mirrors.ustc.edu.cn/centos-stream/RPM-GPG-KEY-CentOS-Stream-9"
          - name: rocky
            type: rhel-like
            release: 9
            mirror: "http://mirrors.ustc.edu.cn/rocky/$release/BaseOS/aarch64/os/"
            gpg_key: "https://mirrors.ustc.edu.cn/rocky/RPM-GPG-KEY-rockyofficial"
          # SUSE系
          - name: opensuse
            type: suse-like
            release: tumbleweed
            mirror: "http://mirrors.ustc.edu.cn/opensuse/ports/tumbleweed/repo/oss/aarch64/"
            gpg_key: "https://mirrors.ustc.edu.cn/opensuse/ports/tumbleweed/repo/oss/aarch64/repodata/repomd.xml.key"
          # Alpine系
          - name: alpine
            type: alpine-like
            release: 3.20
            mirror: "http://mirrors.tuna.tsinghua.edu.cn/alpine/"
          - name: adelie
            type: alpine-like
            release: 1.0
            mirror: "http://mirrors.ustc.edu.cn/adelie/os/aarch64/"
            gpg_key: "https://adelielinux.org/keys/adelie-devel.asc"
          # 独立系
          - name: void
            type: void-like
            release: current
            mirror: "https://mirrors.tuna.tsinghua.edu.cn/voidlinux/current/aarch64/"
            gpg_key: "https://mirrors.tuna.tsinghua.edu.cn/voidlinux/void-release-20240120.pub"
          - name: pardus
            type: pardus-like
            release: 23
            mirror: "http://mirrors.ustc.edu.cn/pardus-archive/23/aarch64/main/"
            gpg_key: "https://pardus.org.tr/keys/pardus-23.gpg"
          - name: chimera
            type: chimera-like
            release: 1.0
            mirror: "http://mirrors.ustc.edu.cn/chimeraos/repo/aarch64/"
            gpg_key: "https://chimeraos.org/gpg.pub"
          - name: gentoo
            type: gentoo-like
            release: stage3
            mirror: "http://mirrors.ustc.edu.cn/gentoo/releases/aarch64/autobuilds/current-stage3-arm64-desktop-systemd/"

    steps:
      # 1. 检出代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. 安装核心依赖（含QEMU模拟、各发行版构建工具）
      - name: Install core dependencies
        run: |
          set -euo pipefail
          # 基础依赖
          sudo apt update -y || { echo "APT更新失败，检查网络"; exit 1; }
          sudo apt install -y \
            debootstrap arch-install-scripts basestrap \
            xz-utils tar gzip wget curl \
            qemu-user-static binfmt-support \
            dnf zypper xbps-install || { echo "核心依赖安装失败"; exit 1; }
          # 注册QEMU-arm64解释器（关键：解决非原生架构执行问题）
          sudo update-binfmts --enable qemu-aarch64 || { echo "QEMU-aarch64注册失败"; exit 1; }
          echo "✅ 核心依赖安装完成"

      # 3. 初始化构建环境（目录、变量）
      - name: Init build env
        run: |
          # 统一输出文件名：发行版-版本-arm64-日期.rootfs.xz
          ROOTFS_NAME="${{ matrix.name }}-${{ matrix.release }}-arm64-$(date +%Y%m%d).rootfs.xz"
          ROOTFS_MOUNT="/mnt/arm64-rootfs-${{ matrix.name }}"
          # 写入环境变量供后续使用
          echo "ROOTFS_NAME=$ROOTFS_NAME" >> $GITHUB_ENV
          echo "ROOTFS_MOUNT=$ROOTFS_MOUNT" >> $GITHUB_ENV
          # 创建挂载目录
          sudo mkdir -p $ROOTFS_MOUNT || { echo "挂载目录创建失败"; exit 1; }
          echo "✅ 构建环境初始化完成（产物名：$ROOTFS_NAME）"

      # 4. 生成构建脚本（分发行版适配，含错误处理）
      - name: Generate build script
        run: |
          cat > build.sh << 'EOF'
          #!/bin/bash
          set -euo pipefail  # 严格模式：错误/未定义变量/管道失败均退出
          ROOTFS_NAME=$1
          ROOTFS_MOUNT=$2
          DISTRO_NAME="${{ matrix.name }}"
          DISTRO_TYPE="${{ matrix.type }}"
          DISTRO_RELEASE="${{ matrix.release }}"
          DISTRO_MIRROR="${{ matrix.mirror }}"
          DISTRO_GPG="${{ matrix.gpg_key }}"
          DEBUG_MODE="${{ github.event.inputs.debug_mode }}"

          # -------------------------- 通用工具函数 --------------------------
          # 错误处理函数
          error_exit() {
            echo -e "\033[31m❌ $1\033[0m"
            # 调试模式保留目录，否则清理
            if [ "$DEBUG_MODE" = "false" ]; then
              sudo umount -l $ROOTFS_MOUNT 2>/dev/null || true
              sudo rm -rf $ROOTFS_MOUNT
            fi
            exit 1
          }

          # GPG密钥导入函数
          import_gpg() {
            if [ -n "$1" ]; then
              echo "🔑 导入GPG密钥：$1"
              sudo curl -fsSL "$1" -o /tmp/distro.gpg || error_exit "GPG密钥下载失败"
              sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/${DISTRO_NAME}.gpg /tmp/distro.gpg || error_exit "GPG密钥转换失败"
            fi
          }

          # -------------------------- Debian系构建（debian/ubuntu/deepin等） --------------------------
          if [ "$DISTRO_TYPE" = "debian-like" ]; then
            echo "🚀 开始构建 Debian系 $DISTRO_NAME $DISTRO_RELEASE (arm64)"
            # 导入GPG密钥
            [ -n "$DISTRO_GPG" ] && import_gpg "$DISTRO_GPG"
            # 第一阶段：拉取基础文件（非原生架构需--foreign）
            sudo debootstrap --arch=arm64 --foreign $DISTRO_RELEASE $ROOTFS_MOUNT $DISTRO_MIRROR \
              || error_exit "$DISTRO_NAME debootstrap第一阶段失败（检查镜像源是否支持aarch64）"
            # 复制QEMU解释器（chroot必需）
            sudo cp /usr/bin/qemu-aarch64-static $ROOTFS_MOUNT/usr/bin/ || error_exit "QEMU解释器复制失败"
            # 第二阶段：初始化系统（模拟arm64环境）
            sudo chroot $ROOTFS_MOUNT /debootstrap/debootstrap --second-stage \
              || error_exit "$DISTRO_NAME debootstrap第二阶段失败（QEMU模拟异常）"
            # 清理缓存
            sudo chroot $ROOTFS_MOUNT apt clean || error_exit "APT缓存清理失败"
            sudo rm -rf $ROOTFS_MOUNT/var/lib/apt/lists/* || true
          fi

          # -------------------------- Arch系构建（arch/manjaro/artix） --------------------------
          if [ "$DISTRO_TYPE" = "arch-like" ]; then
            echo "🚀 开始构建 Arch系 $DISTRO_NAME $DISTRO_RELEASE (arm64)"
            # 配置镜像源
            echo "Server = $DISTRO_MIRROR" | sudo tee /etc/pacman.d/mirrorlist || error_exit "镜像源配置失败"
            # 初始化Pacman密钥
            sudo pacman-key --init || error_exit "Pacman密钥初始化失败"
            if [ "$DISTRO_NAME" = "artix" ]; then
              sudo pacman-key --populate artix || error_exit "Artix密钥导入失败"
            else
              sudo pacman-key --populate archlinuxarm || error_exit "ArchARM密钥导入失败"
            fi
            # 构建基础系统（Artix用basestrap，其他用pacstrap）
            if [ "$DISTRO_NAME" = "artix" ]; then
              sudo basestrap -C /etc/pacman.conf -K --arch=aarch64 $ROOTFS_MOUNT base \
                || error_exit "$DISTRO_NAME basestrap构建失败"
            else
              sudo pacstrap -C /etc/pacman.conf -K --arch=aarch64 $ROOTFS_MOUNT base \
                || error_exit "$DISTRO_NAME pacstrap构建失败"
            fi
            # 清理缓存
            sudo chroot $ROOTFS_MOUNT pacman -Scc --noconfirm || error_exit "Pacman缓存清理失败"
          fi

          # -------------------------- RHEL系构建（fedora/centos/rocky） --------------------------
          if [ "$DISTRO_TYPE" = "rhel-like" ]; then
            echo "🚀 开始构建 RHEL系 $DISTRO_NAME $DISTRO_RELEASE (arm64)"
            # 配置YUM源
            if [ "$DISTRO_NAME" = "fedora" ]; then
              sudo tee /etc/yum.repos.d/fedora.repo << EOF_REPO
              [fedora]
              name=Fedora $DISTRO_RELEASE - aarch64
              baseurl=$DISTRO_MIRROR
              gpgcheck=1
              gpgkey=$DISTRO_GPG
              EOF_REPO
            else
              sudo tee /etc/yum.repos.d/${DISTRO_NAME}.repo << EOF_REPO
              [baseos]
              name=${DISTRO_NAME^} $DISTRO_RELEASE - BaseOS (aarch64)
              baseurl=$DISTRO_MIRROR
              gpgcheck=1
              gpgkey=$DISTRO_GPG
              EOF_REPO
            fi
            # 导入GPG密钥
            import_gpg "$DISTRO_GPG"
            # 构建基础系统（强制aarch64架构）
            sudo dnf --installroot=$ROOTFS_MOUNT --releasever=$DISTRO_RELEASE \
              --forcearch=aarch64 install -y basesystem \
              || error_exit "$DISTRO_NAME dnf构建失败（检查源是否支持aarch64）"
            # 清理缓存
            sudo dnf --installroot=$ROOTFS_MOUNT clean all || error_exit "DNF缓存清理失败"
          fi

          # -------------------------- SUSE系构建（opensuse） --------------------------
          if [ "$DISTRO_TYPE" = "suse-like" ]; then
            echo "🚀 开始构建 SUSE系 $DISTRO_NAME $DISTRO_RELEASE (arm64)"
            # 配置ZYPPER源
            sudo zypper addrepo -f -n "OpenSUSE $DISTRO_RELEASE" $DISTRO_MIRROR opensuse-repo \
              || error_exit "ZYPPER源添加失败"
            # 导入GPG密钥
            sudo rpm --import "$DISTRO_GPG" || error_exit "OpenSUSE GPG密钥导入失败"
            # 构建基础系统（--installroot指定目录，--arch=aarch64）
            sudo zypper --installroot=$ROOTFS_MOUNT --arch=aarch64 \
              install -y --no-recommends patterns-base-base \
              || error_exit "$DISTRO_NAME zypper构建失败"
            # 清理缓存
            sudo zypper --installroot=$ROOTFS_MOUNT clean -a || error_exit "ZYPPER缓存清理失败"
          fi

          # -------------------------- Alpine系构建（alpine/adelie） --------------------------
          if [ "$DISTRO_TYPE" = "alpine-like" ]; then
            echo "🚀 开始构建 Alpine系 $DISTRO_NAME $DISTRO_RELEASE (arm64)"
            # 下载构建工具（Alpine官方工具，Adelie兼容）
            wget -O /tmp/alpine-make-rootfs https://raw.githubusercontent.com/alpinelinux/alpine-make-rootfs/master/alpine-make-rootfs \
              || error_exit "Alpine构建工具下载失败"
            chmod +x /tmp/alpine-make-rootfs
            # 构建（Adelie需指定镜像路径，Alpine用默认）
            if [ "$DISTRO_NAME" = "adelie" ]; then
              sudo /tmp/alpine-make-rootfs -a aarch64 -s "$DISTRO_MIRROR" $ROOTFS_NAME $DISTRO_RELEASE \
                || error_exit "$DISTRO_NAME 构建失败"
            else
              sudo /tmp/alpine-make-rootfs -a aarch64 -s "$DISTRO_MIRROR" $ROOTFS_NAME $DISTRO_RELEASE \
                || error_exit "$DISTRO_NAME 构建失败"
            fi
            # Alpine工具自动压缩，跳过后续tar步骤
            echo "✅ $DISTRO_NAME 构建完成（自动压缩）"
            exit 0
          fi

          # -------------------------- Void构建 --------------------------
          if [ "$DISTRO_TYPE" = "void-like" ]; then
            echo "🚀 开始构建 Void $DISTRO_RELEASE (arm64)"
            # 导入GPG密钥
            import_gpg "$DISTRO_GPG"
            # 初始化RootFS（xbps-install专用）
            sudo xbps-install -S -r $ROOTFS_MOUNT -R "$DISTRO_MIRROR" base-system \
              || error_exit "Void xbps-install构建失败"
            # 清理缓存
            sudo xbps-remove -r $ROOTFS_MOUNT -O || error_exit "Void缓存清理失败"
          fi

          # -------------------------- Pardus构建（土耳其发行版） --------------------------
          if [ "$DISTRO_TYPE" = "pardus-like" ]; then
            echo "🚀 开始构建 Pardus $DISTRO_RELEASE (arm64)"
            # 配置APT源
            sudo tee $ROOTFS_MOUNT/etc/apt/sources.list << EOF_REPO
            deb $DISTRO_MIRROR /
            EOF_REPO
            # 导入GPG密钥
            import_gpg "$DISTRO_GPG"
            # 构建（参考Debian系两阶段）
            sudo debootstrap --arch=arm64 --foreign $DISTRO_RELEASE $ROOTFS_MOUNT $DISTRO_MIRROR \
              || error_exit "Pardus debootstrap第一阶段失败"
            sudo cp /usr/bin/qemu-aarch64-static $ROOTFS_MOUNT/usr/bin/ || error_exit "QEMU复制失败"
            sudo chroot $ROOTFS_MOUNT /debootstrap/debootstrap --second-stage \
              || error_exit "Pardus debootstrap第二阶段失败"
            sudo chroot $ROOTFS_MOUNT apt clean || error_exit "Pardus APT清理失败"
          fi

          # -------------------------- Chimera构建（基于Alpine的独立发行版） --------------------------
          if [ "$DISTRO_TYPE" = "chimera-like" ]; then
            echo "🚀 开始构建 Chimera $DISTRO_RELEASE (arm64)"
            # 导入GPG密钥
            import_gpg "$DISTRO_GPG"
            # 初始化APK源
            sudo mkdir -p $ROOTFS_MOUNT/etc/apk
            sudo tee $ROOTFS_MOUNT/etc/apk/repositories << EOF_REPO
            $DISTRO_MIRROR
            EOF_REPO
            # 安装基础系统
            sudo apk --root $ROOTFS_MOUNT --arch aarch64 add base || error_exit "Chimera APK安装失败"
            # 清理缓存
            sudo apk --root $ROOTFS_MOUNT cache clean || error_exit "Chimera APK清理失败"
          fi

          # -------------------------- Gentoo构建（基于Stage3镜像） --------------------------
          if [ "$DISTRO_TYPE" = "gentoo-like" ]; then
            echo "🚀 开始构建 Gentoo $DISTRO_RELEASE (arm64)"
            # 获取最新Stage3镜像（筛选aarch64+systemd镜像）
            STAGE3_URL=$(curl -fsSL $DISTRO_MIRROR | grep -oE 'href="(stage3-arm64-desktop-systemd-[0-9]+\.tar\.xz)"' | head -n1 | sed 's/href="//;s/"//')
            [ -z "$STAGE3_URL" ] && error_exit "未找到Gentoo Stage3 aarch64镜像"
            # 下载并解压Stage3
            sudo wget -O /tmp/gentoo-stage3.tar.xz "$DISTRO_MIRROR/$STAGE3_URL" \
              || error_exit "Gentoo Stage3下载失败"
            sudo tar -xJf /tmp/gentoo-stage3.tar.xz -C $ROOTFS_MOUNT || error_exit "Gentoo Stage3解压失败"
            # 配置make.conf（指定aarch64架构）
            sudo tee $ROOTFS_MOUNT/etc/portage/make.conf << EOF
            CHOST="aarch64-unknown-linux-gnu"
            ARCH="arm64"
            MAKEOPTS="-j\$(nproc)"
            EOF
          fi

          # -------------------------- 统一压缩RootFS（除Alpine系） --------------------------
          echo "📦 压缩RootFS产物..."
          sudo tar -cJf $ROOTFS_NAME -C $ROOTFS_MOUNT . || error_exit "RootFS压缩失败"
          sudo chown $USER:$USER $ROOTFS_NAME || error_exit "产物权限修正失败"

          # -------------------------- 清理环境 --------------------------
          if [ "$DEBUG_MODE" = "false" ]; then
            sudo umount -l $ROOTFS_MOUNT 2>/dev/null || true
            sudo rm -rf $ROOTFS_MOUNT /tmp/*.gpg /tmp/gentoo-stage3.tar.xz
          fi

          echo -e "\033[32m✅ $DISTRO_NAME $DISTRO_RELEASE (arm64) 构建完成！产物：$ROOTFS_NAME\033[0m"
          EOF

          # 赋予脚本执行权限
          chmod +x build.sh || { echo "构建脚本权限设置失败"; exit 1; }
          echo "✅ 构建脚本生成完成"

      # 5. 执行构建（捕获错误并输出日志）
      - name: Build arm64 RootFS
        run: |
          ./build.sh ${{ env.ROOTFS_NAME }} ${{ env.ROOTFS_MOUNT }} || {
            echo -e "\033[31m❌ ${{ matrix.name }} 构建失败，查看上方日志排查问题\033[0m"
            exit 1
          }

      # 6. 验证产物有效性（检查文件大小，排除空文件）
      - name: Validate RootFS
        run: |
          FILE_SIZE=$(du -sh ${{ env.ROOTFS_NAME }} | awk '{print $1}')
          if [ $(stat -c%s ${{ env.ROOTFS_NAME }}) -lt 10485760 ]; then  # 小于10MB视为无效
            echo -e "\033[31m❌ ${{ env.ROOTFS_NAME }} 产物无效（大小：$FILE_SIZE < 10MB）\033[0m"
            exit 1
          fi
          echo -e "\033[32m✅ 产物验证通过（大小：$FILE_SIZE）\033[0m"

      # 7. 上传产物到GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: arm64-rootfs-${{ matrix.name }}-${{ matrix.release }}-$(date +%Y%m%d)
          release_name: arm64 RootFS | ${{ matrix.name }} ${{ matrix.release }} (${{ date 'YYYY-MM-DD' }})
          draft: false
          prerelease: false

      - name: Upload RootFS to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.ROOTFS_NAME }}
          asset_name: ${{ env.ROOTFS_NAME }}
          asset_content_type: application/x-xz
